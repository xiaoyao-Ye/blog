import{_ as l,o as i,c as a,U as e}from"./chunks/framework.97dce334.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"other/js.md","filePath":"other/js.md","lastUpdated":1690362175000}'),t={name:"other/js.md"},r=e('<h2 id="js-事件队列执行机制" tabindex="-1">js 事件队列执行机制 <a class="header-anchor" href="#js-事件队列执行机制" aria-label="Permalink to &quot;js 事件队列执行机制&quot;">​</a></h2><ul><li>先执行同步代码</li><li>再执行异步代码 <ul><li>异步代码会加载到事件队列里面去,事件队列执行顺序是 <ul><li>==微任务&gt;宏任务==</li><li>==宏任务中的所有<code>非宏任务执行完毕后</code>才会执行下一个宏任务==</li></ul></li></ul></li></ul><h2 id="数组常用的-api" tabindex="-1">数组常用的 api <a class="header-anchor" href="#数组常用的-api" aria-label="Permalink to &quot;数组常用的 api&quot;">​</a></h2><ul><li>unshift 前面添加</li><li>shift 前面删除</li><li>push 后面添加</li><li>pop 后面删除</li><li>splice 从第 index 项开始删除 n 个[可选:替换删除位置]</li><li>slice 返回选定的元素。slice(start,end).如果 end 为负数则从结尾往前算</li><li>join 以(&#39;&#39;)为间隔把数组转为字符串</li><li>sort 排序,参数是个函数 sort(function sortNumber(a,b) {return a-b};</li></ul><h2 id="字符串常见-api" tabindex="-1">字符串常见 api <a class="header-anchor" href="#字符串常见-api" aria-label="Permalink to &quot;字符串常见 api&quot;">​</a></h2><ul><li>split 以(&#39;&#39;)为间隔把字符串转为数组</li><li>slice 返回选定的字符。slice(start,end).如果 end 为负数则从结尾往前算</li><li>indexOf 返回某个指定的字符串值在字符串中首次出现的位置(区分大小写),如没有,则返回-1</li><li>substr 从字符串中提取一些字符,substr(start, length)</li><li>replace 用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</li></ul><h2 id="遍历数组的方法" tabindex="-1">遍历数组的方法? <a class="header-anchor" href="#遍历数组的方法" aria-label="Permalink to &quot;遍历数组的方法?&quot;">​</a></h2><ul><li>forEach 遍历,没有返回值!!!</li><li>map 遍历,map 方法可以分别处理数组中的成员，返回一个新数组，也可以用于遍历数组</li><li>find 遍历,返回第一个符合条件的成员,如果没有符合条件的成员则返回 undefined</li><li>filter 遍历,只返回结果为 true 的成员,组成新数组</li><li>every 遍历,所有成员都符合条件则返回 true, 如果其中一个成员不符合则终止遍历并返回 false</li><li>some 遍历,如果有一个元素满足条件，则终止遍历并返回 true ,否则返回 false</li></ul><h2 id="面对对象编程" tabindex="-1">面对对象编程 <a class="header-anchor" href="#面对对象编程" aria-label="Permalink to &quot;面对对象编程&quot;">​</a></h2><ul><li>什么是面向对象编程? <ul><li>面对对象的本质是面对过程的封装.</li></ul></li><li>面向对象的三个特征 <ul><li>封装 <ul><li>把一个具体功能封装在一个对象中,对外只暴露指定的接口,使用的时候只考虑接口怎么使用,不考虑内部怎么实现</li></ul></li><li>继承 <ul><li>继承就是让一个对象拥有另一个对象的属性和方法.</li></ul></li><li>多态 <ul><li>一个对象在不同情况下的多种状态.</li></ul></li></ul></li></ul><h2 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-label="Permalink to &quot;闭包&quot;">​</a></h2><ul><li>什么是闭包? <ul><li>闭包就是在&#39;函数外面可以访问到函数内部变量的<code>函数</code>&#39;. <ul><li>js 有全局和局部作用域之分.在局部作用域可以访问全局作用域的变量,而全局作用域却访问不到局部作用域的变量,这个时候就需要在用到闭包,在函数的内部 return 一个函数,return 的这个函数是可以访问到的.</li></ul></li></ul></li></ul><h2 id="模块化和组件化" tabindex="-1">模块化和组件化 <a class="header-anchor" href="#模块化和组件化" aria-label="Permalink to &quot;模块化和组件化&quot;">​</a></h2><ul><li>模块化? <ul><li>把不同的功能拆分出来,形成一个单独的文件.里面的数据是私有的,对外只暴露接口,用到这个功能时调用对应的 api 就行了.模块化会降低页面的复杂度,避免命名的污染,复用性高,好维护.</li></ul></li><li>组件化? <ul><li>组件化是一种拆分代码的方式,把页面中有相同结构的代码拆分出来单独作为一个组件,需要用到的地方直接引用这个组件.提高了代码的复用和开发的效率.</li></ul></li></ul>',14),u=[r];function s(o,n,d,h,c,p){return i(),a("div",null,u)}const m=l(t,[["render",s]]);export{f as __pageData,m as default};
