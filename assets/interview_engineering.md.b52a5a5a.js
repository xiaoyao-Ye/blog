import{_ as a,o as s,c as e,U as l}from"./chunks/framework.97dce334.js";const y=JSON.parse('{"title":"工程化","description":"","frontmatter":{},"headers":[],"relativePath":"interview/engineering.md","filePath":"interview/engineering.md","lastUpdated":1689826940000}'),t={name:"interview/engineering.md"},n=l(`<h1 id="工程化" tabindex="-1">工程化 <a class="header-anchor" href="#工程化" aria-label="Permalink to &quot;工程化&quot;">​</a></h1><h2 id="webpack" tabindex="-1">webpack <a class="header-anchor" href="#webpack" aria-label="Permalink to &quot;webpack&quot;">​</a></h2><h3 id="如何解决开发时的跨域问题" tabindex="-1">如何解决开发时的跨域问题? <a class="header-anchor" href="#如何解决开发时的跨域问题" aria-label="Permalink to &quot;如何解决开发时的跨域问题?&quot;">​</a></h3><ul><li>在 <code>webpack.config.js</code> 添加配置</li></ul><div class="language-JavaScript"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">devServer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">proxy</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">/api</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// 所有请求 /api 的接口都会代理到 target 的地址</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#F07178;">target</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://yexiaoyao.com/api</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// 发出去的请求地址是否使用target的地址而不是localhost:8080</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#F07178;">changeOrigin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// 不配置证书, 且忽略https证书报错</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#F07178;">secure</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="tree-shaking-是什么-如何实现" tabindex="-1">tree-shaking 是什么? 如何实现? <a class="header-anchor" href="#tree-shaking-是什么-如何实现" aria-label="Permalink to &quot;tree-shaking 是什么? 如何实现?&quot;">​</a></h3><blockquote><p>tree-shaking 也就是我们常说的摇树, 主要作用是让没有使用到的 js 不进行打包, 减小包的体积.</p></blockquote><ul><li>在 <code>webpack.config.js</code> 中配置 <code>mode: production</code> 开启. (开发环境下没必要开启 tree-shaking)</li><li>实现方式: <ul><li>CommonJS 语法无法 tree-shaking</li><li>使用 import 和 export 语法, 进行按需引入.</li></ul></li><li>不需要 tree-shaking 的代码怎么处理: <ul><li>在 <code>package.json</code> 中配置 <code>sideEffects</code>, 比如所有被 import 的 CSS 都可以放到 <code>sideEffects</code> 里</li></ul></li></ul><h3 id="常用的-loader-有哪些" tabindex="-1">常用的 loader 有哪些? <a class="header-anchor" href="#常用的-loader-有哪些" aria-label="Permalink to &quot;常用的 loader 有哪些?&quot;">​</a></h3><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>html-loader</td><td>将 HTML 导出为字符串</td></tr><tr><td>markdown-loader</td><td>将 Markdown 编译为 HTML</td></tr><tr><td>ts-loader</td><td>像加载 JavaScript 一样加载 <a href="https://www.typescriptlang.org/" target="_blank" rel="noreferrer">TypeScript</a></td></tr><tr><td>babel-loader</td><td>将 ES2015+ 代码并将其转换为 ES5</td></tr><tr><td>css-loader</td><td>处理 css 文件, 输出 JavaScript 模块</td></tr><tr><td>style-loader</td><td>将 css-loader 处理完的 JavaScript 模块转为 style 标签插入 html 中</td></tr><tr><td>less-loader/scss-loader</td><td>加载并编译 LESS / SASS/SCSS 文件</td></tr><tr><td>vue-loader</td><td>加载并编译 <a href="https://vuejs.org/v2/guide/components.html" target="_blank" rel="noreferrer">Vue 组件</a></td></tr></tbody></table><h3 id="常用的-plugin-有哪些" tabindex="-1">常用的 plugin 有哪些? <a class="header-anchor" href="#常用的-plugin-有哪些" aria-label="Permalink to &quot;常用的 plugin 有哪些?&quot;">​</a></h3><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>html-webpack-plugin</td><td>创建 HTML 文件(webpack 本身是处理 js 的)</td></tr><tr><td>clean-webpack-plugin</td><td>清理之前打包的残余文件</td></tr><tr><td>copy-webpack-plugin</td><td>拷贝静态文件到 dist 目录</td></tr><tr><td>eslint-webpack-plugin</td><td>检查代码中的错误</td></tr></tbody></table><h3 id="loader-和-plugin-的区别" tabindex="-1">loader 和 plugin 的区别? <a class="header-anchor" href="#loader-和-plugin-的区别" aria-label="Permalink to &quot;loader 和 plugin 的区别?&quot;">​</a></h3><ul><li>loader 是文件加载器, plugin 是 webpack 插件.</li><li>loader 能够对文件进行编译, 优化, 混淆等, 比如 <code>babel-loader</code> <code>vue-loader</code> 等, plugin 能够实现更多功能, 比如定义全局变量, Code split, 加速编译等.</li><li>loader 是在最终产物之前运行的, plugin 是在整个打包过程都能运行.</li></ul><h3 id="webpack-怎么配置多页应用" tabindex="-1">webpack 怎么配置多页应用? <a class="header-anchor" href="#webpack-怎么配置多页应用" aria-label="Permalink to &quot;webpack 怎么配置多页应用?&quot;">​</a></h3><ul><li>在 <code>webpack.config.js</code> 的 entry 属性中配置多个入口(js)文件</li></ul><div class="language-JavaScript"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">entry</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">app</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./src/index.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">admin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./src/main.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>entry 中配置多个入口(js)文件会有重复打包的问题! 如果多个入口文件都引用了 vue.js, 那么 vue.js 会被打包到两个入口文件中</li><li>使用 <code>optimization.splitChunks</code> 将共同依赖打包成 <code>common.js</code> (<code>html-webpack-plugin</code> 插件会自动引入 <code>common.js</code>)</li></ul><h3 id="如何提高-webpack-的构建速度" tabindex="-1">如何提高 webpack 的构建速度? <a class="header-anchor" href="#如何提高-webpack-的构建速度" aria-label="Permalink to &quot;如何提高 webpack 的构建速度?&quot;">​</a></h3><ul><li>使用 DllPlugin 将不经常变化的代码进行提前打包, 并复用, 如 vue, react</li><li>使用插件进行多线程打包</li><li>关闭 source map</li></ul><h3 id="swc-和-esbuild-是什么" tabindex="-1">swc 和 esbuild 是什么? <a class="header-anchor" href="#swc-和-esbuild-是什么" aria-label="Permalink to &quot;swc 和 esbuild 是什么?&quot;">​</a></h3><ul><li>它们都是用来编译/打包 JS/TS 文件的打包工具, 都能集成到 webpack</li><li>它们都无法对<code>ts</code>代码进行类型检查, 无法打包 <code>css</code> <code>svg</code> 等</li><li>它们都比 babel 快很多(swc 快 20 倍以上, esbuild 快 10~100 倍)</li></ul><h3 id="webpack-和-vite-的区别是什么" tabindex="-1">webpack 和 vite 的区别是什么? <a class="header-anchor" href="#webpack-和-vite-的区别是什么" aria-label="Permalink to &quot;webpack 和 vite 的区别是什么?&quot;">​</a></h3><ul><li>开发环境: vite 在开发环境中不进行打包, 充分利用浏览器对 <code>&lt;script type=module&gt;</code> 的支持(让浏览器去 <code>/node_modules/.vite/</code> 找对应文件), 而 <code>webpack-dev-server</code> 使用 <code>babel-loader</code> 基于内存打包, 比 vite 慢很多很多.</li><li>生产环境: vite 使用 rollup + esbuild 来打包 js 代码, webpack 使用 babel 打包 js 代码会比 esbuild 慢很多. (webpack 也可以使用 esbuild 打包, 但是需要自己配置, 非常麻烦)</li><li>文件处理时机: webpack 是构建好所有文件, 等你请求的时候把对应文件输出给你, 而 vite 是在你请求某个文件的时候处理这个文件并输出给你.</li></ul><h2 id="vite" tabindex="-1">vite <a class="header-anchor" href="#vite" aria-label="Permalink to &quot;vite&quot;">​</a></h2><h3 id="vite-有哪些缺点" tabindex="-1">vite 有哪些缺点? <a class="header-anchor" href="#vite-有哪些缺点" aria-label="Permalink to &quot;vite 有哪些缺点?&quot;">​</a></h3><ul><li>热更新经常失败, 原因不清楚</li><li>有些功能 rollup 不支持, 需要自己写 rollup 插件</li><li>不支持非现代浏览器</li></ul><h3 id="常用的-plugin-有哪些-1" tabindex="-1">常用的 plugin 有哪些? <a class="header-anchor" href="#常用的-plugin-有哪些-1" aria-label="Permalink to &quot;常用的 plugin 有哪些?&quot;">​</a></h3><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>unplugin-auto-import</td><td>按需自动导入 Vue 等框架的 API</td></tr><tr><td>unplugin-component-vue</td><td>自动按需导入 Vue 的组件</td></tr></tbody></table>`,29),o=[n];function p(r,c,i,d,h,u){return s(),e("div",null,o)}const b=a(t,[["render",p]]);export{y as __pageData,b as default};
