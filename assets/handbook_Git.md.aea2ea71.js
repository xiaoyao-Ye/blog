import{_ as s,o as a,c as l,U as n}from"./chunks/framework.97dce334.js";const u=JSON.parse('{"title":"Git","description":"","frontmatter":{},"headers":[],"relativePath":"handbook/Git.md","filePath":"handbook/Git.md","lastUpdated":1689784325000}'),e={name:"handbook/Git.md"},t=n(`<h1 id="git" tabindex="-1">Git <a class="header-anchor" href="#git" aria-label="Permalink to &quot;Git&quot;">​</a></h1><h2 id="配置-git-邮箱与账号" tabindex="-1">配置 git 邮箱与账号 <a class="header-anchor" href="#配置-git-邮箱与账号" aria-label="Permalink to &quot;配置 git 邮箱与账号&quot;">​</a></h2><p>如果是第一次使用 git，需要配置提交者信息，推荐和 github 的账号邮箱一致</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># git config  user.name 你的目标用户名</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># git config  user.email 你的目标邮箱名</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 使用--global参数，配置全局的用户名和邮箱，只需要配置一次即可。推荐配置github的用户名和邮箱</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">--global</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">user.name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">autumnFish</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">--global</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">user.email</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">517729329</span><span style="color:#C3E88D;">@qq.com</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 查看配置信息</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--list</span></span></code></pre></div><h3 id="git-init" tabindex="-1">git init <a class="header-anchor" href="#git-init" aria-label="Permalink to &quot;git init&quot;">​</a></h3><ul><li>作用：初始化 git 仓库，想要使用 git 对某个项目进行管理，需要<code>git init</code>进行初始化</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 初始化仓库， 在当前目录下生成一个隐藏文件夹.git，不能修改.git下的任何东西</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init</span></span></code></pre></div><h2 id="git-基本命令" tabindex="-1">git 基本命令 <a class="header-anchor" href="#git-基本命令" aria-label="Permalink to &quot;git 基本命令&quot;">​</a></h2><h3 id="git-status" tabindex="-1">git status <a class="header-anchor" href="#git-status" aria-label="Permalink to &quot;git status&quot;">​</a></h3><ul><li><p>作用：查看文件的状态</p></li><li><p>命令：<code>git status</code></p><ul><li>红色表示工作区中的文件需要提交</li><li>绿色表示暂存区中的文件需要提交</li></ul></li></ul><h3 id="git-add" tabindex="-1">git add <a class="header-anchor" href="#git-add" aria-label="Permalink to &quot;git add&quot;">​</a></h3><blockquote><p>注意点：空的文件夹是会被忽略掉的，如果想要提交这个文件夹，一般会在该目录下创建一个.gitkeep 文件</p></blockquote><ul><li>作用：将文件由 <code>工作区</code> 添加到 <code>暂存区</code>，在 git 中，文件无法直接从工作区直接添加到仓库区，必须先从工作区添加到暂存区，再从暂存区添加到仓库区。</li><li>命令：<code>git add 文件名/目录名</code></li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 将index.html添加到暂存区</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">index.html</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 将css目录下所有的文件添加到暂存区</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">css</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 将当前目录下所有的js文件添加到暂存区</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">*</span><span style="color:#C3E88D;">.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 添加当前目录下所有的文件</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-A</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--all</span></span></code></pre></div><h3 id="git-commit" tabindex="-1">git commit <a class="header-anchor" href="#git-commit" aria-label="Permalink to &quot;git commit&quot;">​</a></h3><p>作用：将文件由 暂存区 添加到 仓库区，生成版本号</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 将文件从暂存区提交到仓库</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">提交说明</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 如果不写提交说明，会进入vi编辑器，没有写提交说明，是提交不成功的。</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;"># 需要使用vi输入内容</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 如果是一个已经暂存过的文件，可以快速提交，如果是未追踪的文件，那么命令将不生效。</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-a</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">提交说明</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 修改最近的一次提交说明， 如果提交说明不小心输错了，可以使用这个命令</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--amend</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">提交说明</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><h3 id="git-log" tabindex="-1">git log <a class="header-anchor" href="#git-log" aria-label="Permalink to &quot;git log&quot;">​</a></h3><ul><li>作用：查看提交日志</li><li><code>git log</code> 查看提交的日志</li></ul><h2 id="git-对比" tabindex="-1">git 对比 <a class="header-anchor" href="#git-对比" aria-label="Permalink to &quot;git 对比&quot;">​</a></h2><h3 id="git-diff" tabindex="-1">git diff <a class="header-anchor" href="#git-diff" aria-label="Permalink to &quot;git diff&quot;">​</a></h3><p><code>git diff</code>可以查看每次提交的内容的不同</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight has-diff"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 查看工作区与暂存区的不同</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">diff</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 查看暂存区与仓库区的不同</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">diff</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--cached</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 查看工作区与仓库区的不同，HEAD表示最新的那次提交</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">diff</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">HEAD</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 查看两个版本之间的不同</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">diff</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">c265262</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">de4845b</span></span></code></pre></div><h2 id="git-重置" tabindex="-1">git 重置 <a class="header-anchor" href="#git-重置" aria-label="Permalink to &quot;git 重置&quot;">​</a></h2><h3 id="git-reset" tabindex="-1">git reset <a class="header-anchor" href="#git-reset" aria-label="Permalink to &quot;git reset&quot;">​</a></h3><ul><li><p>作用：版本回退，将代码恢复到已经提交的某一个版本中。</p></li><li><p><code>git reset --hard 版本号</code> 将代码回退到某个指定的版本(版本号只要有前几位即可)</p></li><li><p><code>git reset --hard head~1</code>将版本回退到上一次提交</p><ul><li>~1:上一次提交</li><li>~2:上上次提交</li><li>~0:当前提交</li></ul></li><li><p>当使用了<code>git reset</code>命令后，版本会回退，使用<code>git log</code>只能看到当前版本之前的信息。使用<code>git reflog</code>可以查看所有的版本信息</p></li></ul><h2 id="git-忽视文件" tabindex="-1">git 忽视文件 <a class="header-anchor" href="#git-忽视文件" aria-label="Permalink to &quot;git 忽视文件&quot;">​</a></h2><blockquote><p>在仓库中，有些文件是不想被 git 管理的，比如数据的配置密码、写代码的一些思路等。git 可以通过配置从而达到忽视掉一些文件，这样这些文件就可以不用提交了。</p></blockquote><ul><li>在仓库的根目录创建一个<code>.gitignore</code>的文件，文件名是固定的。</li><li>将不需要被 git 管理的文件路径添加到<code>.gitignore</code>中</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 忽视idea.txt文件</span></span>
<span class="line"><span style="color:#FFCB6B;">idea.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 忽视css下的index.js文件</span></span>
<span class="line"><span style="color:#FFCB6B;">css/index.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 忽视css下的所有的js文件</span></span>
<span class="line"><span style="color:#FFCB6B;">css/*.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 忽视css下的所有文件</span></span>
<span class="line"><span style="color:#FFCB6B;">css/*.*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 忽视css文件夹</span></span>
<span class="line"><span style="color:#FFCB6B;">css</span></span></code></pre></div><h2 id="git-分支命令" tabindex="-1">git 分支命令 <a class="header-anchor" href="#git-分支命令" aria-label="Permalink to &quot;git 分支命令&quot;">​</a></h2><h3 id="创建分支" tabindex="-1">创建分支 <a class="header-anchor" href="#创建分支" aria-label="Permalink to &quot;创建分支&quot;">​</a></h3><ul><li><code>git branch 分支名称</code>创建分支，分支中的代码，在创建时与当前分支的内容完全相同。</li><li>git 在第一次提交时，就有了一个叫<code>master</code>的主分支。</li><li><code>git branch dev</code>，创建了一个叫做 dev 的分支</li></ul><h3 id="查看分支" tabindex="-1">查看分支 <a class="header-anchor" href="#查看分支" aria-label="Permalink to &quot;查看分支&quot;">​</a></h3><ul><li><code>git branch</code>可以查看所有的分支，</li><li>在当前分支的前面会有一个<code>*</code></li><li>在 git 中，有一个特殊指针<code>HEAD</code>,永远会指向当前分支</li></ul><h3 id="切换分支" tabindex="-1">切换分支 <a class="header-anchor" href="#切换分支" aria-label="Permalink to &quot;切换分支&quot;">​</a></h3><ul><li><code>git checkout 分支名称</code>切换分支 HEAD 指针指向了另一个分支</li><li>在当前分支的任何操作，都不会影响到其他的分支，除非进行了分支合并。</li><li>提交代码时，会生产版本号，当前分支会指向最新的版本号。</li></ul><h3 id="创建并切换分支" tabindex="-1">创建并切换分支 <a class="header-anchor" href="#创建并切换分支" aria-label="Permalink to &quot;创建并切换分支&quot;">​</a></h3><ul><li><code>git checkout -b 分支名称</code> 创建并切换分支</li><li>切换分支会做两件事情 <ul><li>创建一个新分支</li><li>把 head 指针指向当前的分支</li></ul></li></ul><h3 id="删除分支" tabindex="-1">删除分支 <a class="header-anchor" href="#删除分支" aria-label="Permalink to &quot;删除分支&quot;">​</a></h3><ul><li><code>git branch -d 分支名称</code> 可以删除分支</li><li>注意：不能在当前分支删除当前分支，需要切换到其他分支才能删除。</li><li>注意：<code>master</code>分支是可以删除的，但是不推荐那么做。</li></ul><h3 id="合并分支" tabindex="-1">合并分支 <a class="header-anchor" href="#合并分支" aria-label="Permalink to &quot;合并分支&quot;">​</a></h3><ul><li><code>git merge 分支名称</code> 将其他分支的内容合并到当前分支。</li><li>在<code>master</code>分支中执行<code>git merge dev</code> 将<code>dev</code>分支中的代码合并到<code>master</code>分支</li></ul><h3 id="git-合并冲突" tabindex="-1">git 合并冲突 <a class="header-anchor" href="#git-合并冲突" aria-label="Permalink to &quot;git 合并冲突&quot;">​</a></h3><ul><li>对于同一个文件，如果有多个分支需要合并时，容易出现冲突。</li><li>合并分支时，如果出现冲突，只能手动处理，再次提交，一般的作法，把自己的代码放到冲突代码的后面即可。</li></ul><h2 id="git-远程仓库" tabindex="-1">git 远程仓库 <a class="header-anchor" href="#git-远程仓库" aria-label="Permalink to &quot;git 远程仓库&quot;">​</a></h2><h3 id="github-与-git" tabindex="-1">github 与 git <a class="header-anchor" href="#github-与-git" aria-label="Permalink to &quot;github 与 git&quot;">​</a></h3><p>git 与 github 没有直接的关系。</p><ul><li>git 是一个版本控制工具。</li><li>github 是一个代码托管平台，开源社区，是 git 的一个远程代码仓库。</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//1. gitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//2. github免费，代码所有人都能看到，但是只有你自己能修改。付费的可以隐藏。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//3. 创建git项目时，不能有中文。</span></span></code></pre></div><h3 id="git-clone" tabindex="-1">git clone <a class="header-anchor" href="#git-clone" aria-label="Permalink to &quot;git clone&quot;">​</a></h3><ul><li>作用：克隆远程仓库的代码到本地</li><li>git clone [远程仓库地址]</li><li><code>git clone git://github.com/autumnFish/test.git</code>会在本地新建一个<code>test</code>文件夹，在 test 中包含了一个<code>.git</code>目录，用于保存所有的版本记录，同时 test 文件中还有最新的代码，你可以直接进行后续的开发和使用。</li><li>git 克隆默认会使用远程仓库的项目名字，也可以自己指定。需要是使用以下命令：<code>git clone [远程仓库地址] [本地项目名]</code></li></ul><h3 id="git-push" tabindex="-1">git push <a class="header-anchor" href="#git-push" aria-label="Permalink to &quot;git push&quot;">​</a></h3><ul><li>作用：将本地仓库中代码提交到远程仓库</li><li><code>git push 仓库地址 master</code> 在代码提交到远程仓库，注意 master 分支必须写，不能省略</li><li>例子：<code>git push git@github.com:autumnFish/test.git master</code> 如果第一次使用，需要填写 github 的用户名和密码</li></ul><h3 id="git-pull" tabindex="-1">git pull <a class="header-anchor" href="#git-pull" aria-label="Permalink to &quot;git pull&quot;">​</a></h3><ul><li><p>作用：将远程的代码下载到本地</p></li><li><p>通常在 push 前，需要先 pull 一次。</p></li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 获取远程仓库的更新，并且与本地的分支进行合并</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pull</span></span></code></pre></div><h3 id="git-remote" tabindex="-1">git remote <a class="header-anchor" href="#git-remote" aria-label="Permalink to &quot;git remote&quot;">​</a></h3><p>每次 push 操作都需要带上远程仓库的地址，非常的麻烦，我们可以给仓库地址设置一个别名</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 给远程仓库设置一个别名</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">remote</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">仓库别名</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">仓库地址</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">remote</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">autumnFish</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git@github.com:autumnFish/test.git</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># autumnFish</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">remote</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">remove</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">autumnFish</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># git clone的仓库默认有一个origin的别名</span></span></code></pre></div><h2 id="ssh" tabindex="-1">SSH <a class="header-anchor" href="#ssh" aria-label="Permalink to &quot;SSH&quot;">​</a></h2><h3 id="ssh-免密码登陆" tabindex="-1">SSH 免密码登陆 <a class="header-anchor" href="#ssh-免密码登陆" aria-label="Permalink to &quot;SSH 免密码登陆&quot;">​</a></h3><p>git 支持多种数据传输协议：</p><ul><li>https 协议：<code>https://github.com/autumnFish/test.git</code> 需要输入用户名和密码</li><li>ssh 协议：<code>git@github.com:autumnFish/test.git</code> 可以配置免密码登录</li></ul><p>每次 push 或者 pull 代码，如果使用 https 协议，那么都需要输入用户名和密码进行身份的确认，非常麻烦。</p><ul><li>github 为了账户的安全，需要对每一次 push 请求都要验证用户的身份，只有合法的用户才可以 push</li><li>使用 ssh 协议，配置 ssh 免密码，可以做到免密码往 github 推送代码</li></ul><h3 id="ssh-免密码登录配置" tabindex="-1">SSH 免密码登录配置 <a class="header-anchor" href="#ssh-免密码登录配置" aria-label="Permalink to &quot;SSH 免密码登录配置&quot;">​</a></h3><p>注意：这些命令需要在 bash 中敲</p><ul><li>1 创建 SSH Key：<code>ssh-keygen -t rsa</code></li><li>2 在文件路径  <code>C:\\用户\\当前用户名\\</code>  找到  <code>.ssh</code>  文件夹</li><li>3 文件夹中有两个文件： <ul><li>私钥：<code>id_rsa</code></li><li>公钥：<code>id_rsa.pub</code></li></ul></li><li>4 在  <code>github -&gt; settings -&gt; SSH and GPG keys</code>页面中，新创建 SSH key</li><li>5 粘贴 公钥  <code>id_rsa.pub</code>  内容到对应文本框中</li><li>5 在 github 中新建仓库或者使用现在仓库，拿到<code>git@github.com:用户名/仓库名.git</code></li><li>6 此后，再次 SSH 方式与 github“通信”，不用输入密码确认身份了</li></ul><h2 id="git-提交规范" tabindex="-1">git 提交规范 <a class="header-anchor" href="#git-提交规范" aria-label="Permalink to &quot;git 提交规范&quot;">​</a></h2><ul><li><code>feat</code> 新增功能</li><li><code>fix</code> 修复问题/bug</li><li><code>style</code> 代码风格相关(不影响运行结果的)</li><li><code>perf</code> 优化/性能提升</li><li><code>refactor</code> 重构</li><li><code>revert</code> 撤销修改</li><li><code>test</code> 测试相关</li><li><code>docs</code> 文档/注释</li><li><code>chore</code> 依赖更新/脚手架配置修改等</li><li><code>workflow</code> 工作流跟进</li><li><code>ci</code> 持续集成</li><li><code>mod</code> 不确定分类的修改</li><li><code>wip</code> 开发中</li><li><code>types</code> 类型修改</li></ul>`,71),o=[t];function i(p,c,r,d,h,g){return a(),l("div",null,o)}const C=s(e,[["render",i]]);export{u as __pageData,C as default};
