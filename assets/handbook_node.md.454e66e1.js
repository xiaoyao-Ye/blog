import{_ as s,o as a,c as n,U as l}from"./chunks/framework.97dce334.js";const C=JSON.parse('{"title":"node","description":"","frontmatter":{},"headers":[],"relativePath":"handbook/node.md","filePath":"handbook/node.md","lastUpdated":1699261522000}'),o={name:"handbook/node.md"},p=l(`<h1 id="node" tabindex="-1">node <a class="header-anchor" href="#node" aria-label="Permalink to &quot;node&quot;">​</a></h1><h2 id="global" tabindex="-1">global <a class="header-anchor" href="#global" aria-label="Permalink to &quot;global&quot;">​</a></h2><p>一些全局的环境变量, 或者全局变量可以挂载到全剧对象上面. 就好像浏览器挂载到 <code>window</code> 一样</p><div class="language-Typescript"><button title="Copy Code" class="copy"></button><span class="lang">Typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">assign</span><span style="color:#A6ACCD;">(global</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> $ </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h2 id="common-api" tabindex="-1">common API <a class="header-anchor" href="#common-api" aria-label="Permalink to &quot;common API&quot;">​</a></h2><h3 id="constant" tabindex="-1">constant <a class="header-anchor" href="#constant" aria-label="Permalink to &quot;constant&quot;">​</a></h3><blockquote><p>node 内置的常量</p></blockquote><ul><li><code>__dirname</code> 动态获取当前文件所属目录的绝对路径</li><li><code>__filename</code> 动态获取当前文件的绝对路径</li></ul><h3 id="fs" tabindex="-1">fs <a class="header-anchor" href="#fs" aria-label="Permalink to &quot;fs&quot;">​</a></h3><blockquote><p>Sync 结尾是同步, 其余是异步</p></blockquote><ul><li><code>fs.exists</code>：判断是否存在，存在则返回 <code>true</code>，否则返回 <code>false</code>。</li><li><code>fs.writeFile</code>：将指定的数据写入文件。默认情况下，如果文件存在，将被替换。</li><li><code>fs.mkdir</code>：创建目录。</li><li><code>fs.readdir</code>：读取文件目录，返回目录下文件名数组。</li><li><code>fs.readFile(&#39;xx&#39;, &#39;utf-8&#39;)</code>：读取文件并返回其内容。</li><li><code>fs.stat</code>：给定路径，返回 <code>stat</code> 对象，该对象具有多个属性和方法来获取有关文件或目录的详细信息。 <ul><li><code>stat.isDirectory()</code>：该路径是否是目录。</li><li><code>stat.isFile()</code>：该路径是否是文件。</li></ul></li><li><code>fs.copyFile</code>：将文件从源路径异步复制到目标路径。默认情况下，如果文件存在，将被替换。</li><li><code>fs.rm</code>：删除给定路径的目录。它也可以递归地用于删除嵌套目录。</li></ul><h3 id="path" tabindex="-1">path <a class="header-anchor" href="#path" aria-label="Permalink to &quot;path&quot;">​</a></h3><ul><li><p><code>resolve</code> 将多个路径解析为一个绝对路径.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 语法为 \`path.resolve([...paths])\`</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// \`...paths\` 是一个路径或多个路径片段, 如果传入路径为空, 则返回当前工作目录的绝对路径</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/foo/bar</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./baz</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 返回: &#39;/foo/bar/baz&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/foo/bar</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/tmp/file/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 返回: &#39;/tmp/file&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">wwwroot</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">static_files/png/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">../gif/image.gif</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 如果当前工作目录是 /home/myself/node，</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 则返回 &#39;/home/myself/node/wwwroot/static_files/gif/image.gif&#39;</span></span></code></pre></div></li><li><p><code>join</code> 将多个路径拼接为一个路径.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 语法为 \`path.join([...paths])\`</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// \`...paths\` 是一个路径或多个路径片段,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 任何一个路径片段是绝对路径，则之前的路径片段都会被忽略</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 如果拼接后的路径是空字符串，则返回当前工作目录的路径</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">baz/asdf</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">quux</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">..</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 返回: &#39;/foo/bar/baz/asdf&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">wwwroot</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">static_files/png/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">../gif/image.gif</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 如果当前工作目录是 /home/myself/node，</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 则返回 &#39;wwwroot/static_files/gif/image.gif&#39;</span></span></code></pre></div></li><li><p><code>extname</code> 获取文件的扩展名.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 它的语法为path.extname(path)。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 其中path是文件路径。如果文件没有扩展名，则返回空字符串</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">baz/asdf</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">quux</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">..</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 返回: &#39;/foo/bar/baz/asdf&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">wwwroot</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">static_files/png/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">../gif/image.gif</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 如果当前工作目录是 /home/myself/node，</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 则返回 &#39;wwwroot/static_files/gif/image.gif&#39;</span></span></code></pre></div></li></ul><h3 id="child-process" tabindex="-1">child_process <a class="header-anchor" href="#child-process" aria-label="Permalink to &quot;child_process&quot;">​</a></h3><ul><li><code>spawn</code> 执行命令. 主要用于异步地衍生子进程，不会阻塞 Node.js 事件循环</li></ul><h2 id="shebang" tabindex="-1">shebang <a class="header-anchor" href="#shebang" aria-label="Permalink to &quot;shebang&quot;">​</a></h2><p>Shebang 是一种在 Unix 和 Linux 系统中使用的特殊注释，通常用于指定脚本文件的解释器。在文件的第一行添加一个井号（#）和一个惊叹号（!），紧接着是解释器的完整路径或可执行文件名。例如，<code>#!/usr/bin/python</code> <code>#!/usr/bin/env node</code>。当直接调用脚本文件时，调用者会利用 Shebang 提供的信息调用相应的解释器，从而使得脚本文件的调用方式与普通的可执行文件类似。</p><p>Shebang 的作用是指定脚本文件的解释器。</p><p><code>#!/usr/bin/env python</code> 在这个例子中, 用了 env. 使用 env 和不使用 env 的区别在于，env 将在 PATH 环境变量中查找 python，而不是在固定的路径中查找。这样做的好处是可以避免在不同的系统上使用不同的 Python 解释器所带来的问题。</p><h3 id="package-json-配置可执行文件" tabindex="-1">package.json 配置可执行文件 <a class="header-anchor" href="#package-json-配置可执行文件" aria-label="Permalink to &quot;package.json 配置可执行文件&quot;">​</a></h3><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 可执行文件, 从 npm 上安装这个包后, 使用 test 命令会执行这个index.js</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">bin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./index.js</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// or</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 可配置为对象形式</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// &quot;bin&quot;: {</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//   // xx</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//   &quot;xx&quot;: &quot;./xx.js&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//   // zz</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//   &quot;zz&quot;: &quot;./zz.js&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="import" tabindex="-1">import <a class="header-anchor" href="#import" aria-label="Permalink to &quot;import&quot;">​</a></h2><p>当 node 中需要导入一个文件时, 使用 import 导入需要的是一个 fileURL, 不能直接是 path</p><p>可以使用 <code>await import(url.pathToFileURL(resolve(&#39;./xx.js&#39;)).toString());</code> 这种方式转换.</p><h2 id="restful-api" tabindex="-1">restful api <a class="header-anchor" href="#restful-api" aria-label="Permalink to &quot;restful api&quot;">​</a></h2><p>典型的特征是，用请求方法来表示不同的操作:</p><ul><li><code>GET</code> 表示获取资源</li><li><code>POST</code> 表示新建资源</li><li><code>PUT</code> 表示更新资源</li><li><code>PATCH</code> 表示更新资源(部分更新)</li><li><code>DELETE</code> 表示删除资源</li></ul><p>为了更好的扩展性、可读性，API 的结构一般是这样的:</p><ul><li><code>/{系统类型或者api}/{版本号}/{功能模块}/{具体操作}</code></li></ul><blockquote><p>个人觉得版本是 v1 的时候, 可以省略版本号. 其他情况根据实际情况而定</p></blockquote><p>参考:</p><p><a href="http://www.ruanyifeng.com/blog/2018/10/restful-api-best-practices.html" target="_blank" rel="noreferrer">RESTful API 最佳实践 ---阮一峰</a></p><p><a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="noreferrer">理解 RESTful 架构 ---阮一峰</a></p><p><a href="https://easydoc.net/a/restful/" target="_blank" rel="noreferrer">什么是 RESTful</a></p><p><a href="https://easydoc.net/a/api-design/" target="_blank" rel="noreferrer">如何设计一个好的 API 接口名</a></p>`,35),e=[p];function t(c,r,i,y,D,F){return a(),n("div",null,e)}const A=s(o,[["render",t]]);export{C as __pageData,A as default};
